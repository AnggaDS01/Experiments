## Carrying Out Error Analysis

Teks tersebut adalah bagian dari sebuah video yang menjelaskan tentang error analysis, yaitu cara untuk mengetahui kesalahan-kesalahan yang dibuat oleh algoritma pembelajaran mesin (machine learning) ketika mengenali gambar. Error analysis bisa membantu kita memilih ide-ide yang paling berguna untuk memperbaiki algoritma kita.

Contohnya, misalnya kita punya algoritma yang bisa mengenali gambar kucing. Tapi ternyata algoritma itu masih sering salah, misalnya mengira gambar anjing adalah kucing. Kita ingin tahu seberapa besar masalah ini dan apakah ada cara untuk memperbaikinya.

Salah satu cara yang bisa kita lakukan adalah dengan melihat 100 gambar yang salah dikenali oleh algoritma kita. Kita bisa mencatat berapa banyak gambar yang sebenarnya adalah anjing, atau gambar kucing besar (seperti singa atau macan), atau gambar yang buram, atau gambar yang pakai filter Instagram. Dengan begitu kita bisa tahu persentase kesalahan dari masing-masing kategori.

Misalnya kita temukan bahwa 5% gambar yang salah adalah anjing, 43% adalah kucing besar, 61% adalah gambar buram, dan 12% adalah gambar pakai filter. Dari data ini kita bisa tahu bahwa masalah terbesar adalah gambar buram dan kucing besar. Jadi mungkin kita bisa fokus untuk mencari solusi untuk kedua masalah ini.

Error analysis bisa membantu kita menghemat waktu dan tenaga karena kita tidak perlu menebak-nebak apa yang harus diperbaiki. Kita bisa melihat langsung dari data mana yang paling berpengaruh dan berpotensi meningkatkan kinerja algoritma kita.


====================================================================================================


## Cleaning Up Incorrectly Labeled Data
Teks di atas adalah bagian dari sebuah video yang menjelaskan tentang bagaimana menangani data yang salah label dalam masalah pembelajaran mesin (machine learning) yang diawasi. Data yang salah label adalah data yang memiliki nilai keluaran (output) yang tidak sesuai dengan gambar masukan (input) yang sebenarnya. Misalnya, gambar anjing yang diberi label kucing.

Teks tersebut memberikan beberapa saran tentang apa yang harus dilakukan jika kita menemukan data yang salah label dalam data latih (training set), data validasi (dev set), atau data uji (test set) kita. Data latih adalah data yang digunakan untuk melatih algoritma kita agar bisa mengenali gambar dengan benar. Data validasi adalah data yang digunakan untuk mengevaluasi kinerja algoritma kita dan memilih ide-ide perbaikan yang paling baik. Data uji adalah data yang digunakan untuk menguji kinerja akhir algoritma kita.

Saran-saran tersebut adalah:

- Untuk data latih, kita tidak perlu terlalu khawatir dengan data yang salah label, asalkan jumlahnya tidak terlalu banyak dan kesalahannya bersifat acak. Algoritma pembelajaran mesin biasanya cukup kuat untuk mengatasi kesalahan acak dalam data latih. Namun, jika kesalahannya bersifat sistematis, misalnya selalu salah mengenali anjing putih sebagai kucing, maka itu bisa menjadi masalah dan perlu diperbaiki.
- Untuk data validasi dan data uji, kita perlu lebih berhati-hati dengan data yang salah label, karena itu bisa mempengaruhi kemampuan kita untuk membandingkan algoritma-algoritma yang berbeda. Untuk mengetahui seberapa besar pengaruhnya, kita bisa melakukan analisis kesalahan dengan cara membuat tabel yang mencatat berapa banyak gambar yang salah label dalam setiap kategori kesalahan. Misalnya, berapa banyak gambar anjing, gambar kucing besar, gambar buram, atau gambar pakai filter yang salah label. Jika persentase gambar yang salah label cukup besar dibandingkan dengan keseluruhan kesalahan algoritma kita, maka mungkin sebaiknya kita memperbaiki label-label tersebut.
- Jika kita memutuskan untuk memperbaiki label-label dalam data validasi dan data uji, ada beberapa hal yang perlu diperhatikan. Pertama, kita harus menerapkan proses perbaikan yang sama untuk kedua jenis data tersebut, agar tetap memiliki distribusi yang sama. Kedua, kita harus mempertimbangkan untuk memeriksa label-label pada gambar yang benar dikenali oleh algoritma kita, bukan hanya pada gambar yang salah dikenali. Ini karena mungkin ada beberapa gambar yang benar dikenali secara kebetulan dan sebenarnya labelnya salah. Ketiga, kita mungkin tidak perlu menerapkan proses perbaikan yang sama untuk data latih, karena biasanya jumlahnya lebih banyak dan algoritma kita lebih toleran terhadap kesalahan di sana.
- Teks tersebut juga memberikan beberapa nasihat tentang pentingnya melakukan analisis kesalahan secara manual dan bagaimana hal itu bisa membantu kita menentukan arah perbaikan algoritma kita. Analisis kesalahan adalah cara untuk melihat secara langsung apa saja kesalahan-kesalahan yang dibuat oleh algoritma kita dan berapa banyaknya. Dengan melakukan analisis kesalahan, kita bisa menghemat waktu dan tenaga karena kita tidak perlu menebak-nebak apa yang harus diperbaiki. Kita bisa melihat dari data mana yang paling berpengaruh dan berpotensi meningkatkan kinerja algoritma kita.


====================================================================================================


## Training and Testing on Different Distributions
Teks di atas adalah bagian dari sebuah kursus online tentang pembelajaran mesin (machine learning). Teks tersebut membahas tentang bagaimana memilih data latihan (training data) yang sesuai dengan data evaluasi (dev and test data) ketika data latihan dan data evaluasi memiliki distribusi yang berbeda. Berikut adalah penjelasan teks tersebut dengan bahasa yang mudah dipahami dan terperinci:

- Pembelajaran mesin adalah proses membuat komputer belajar dari data untuk melakukan tugas tertentu, seperti mengenali ucapan "buka jendela" di cermin spion mobil.
- Data latihan adalah kumpulan contoh yang diberikan kepada komputer untuk belajar pola atau aturan yang berguna untuk tugas tersebut. Misalnya, untuk mengenali ucapan "buka jendela", kita bisa memberikan banyak rekaman suara yang mengandung ucapan tersebut atau ucapan lainnya sebagai data latihan.
- Data evaluasi adalah kumpulan contoh yang digunakan untuk mengukur seberapa baik komputer telah belajar dari data latihan. Data evaluasi biasanya dibagi menjadi dua bagian: data dev (development) dan data test (testing). Data dev digunakan untuk mengevaluasi dan memperbaiki algoritma pembelajaran mesin secara berkala, sedangkan data test digunakan untuk menguji kinerja akhir algoritma tersebut.
- Idealnya, data latihan dan data evaluasi harus memiliki distribusi yang sama, yaitu berasal dari sumber yang sama dan memiliki karakteristik yang sama. Misalnya, jika kita ingin membuat algoritma pembelajaran mesin untuk mengenali ucapan "buka jendela" di cermin spion mobil, maka data latihan dan data evaluasi harus berisi rekaman suara dari dalam mobil dengan berbagai kondisi suara, seperti volume, aksen, latar belakang, dll.
- Namun, terkadang kita tidak memiliki cukup data evaluasi yang berasal dari sumber yang sama dengan data latihan. Misalnya, jika kita ingin membuat algoritma pembelajaran mesin untuk mengenali ucapan "buka jendela" di cermin spion mobil, maka kita mungkin tidak memiliki banyak rekaman suara dari dalam mobil. Kita mungkin memiliki banyak rekaman suara dari sumber lain, seperti radio, podcast, atau telepon, yang bisa kita gunakan sebagai data latihan. Namun, rekaman suara dari sumber lain ini mungkin berbeda dengan rekaman suara dari dalam mobil dalam hal kualitas, volume, aksen, latar belakang, dll. Ini berarti data latihan dan data evaluasi memiliki distribusi yang berbeda.
- Ketika data latihan dan data evaluasi memiliki distribusi yang berbeda, kita perlu memilih data latihan yang sesuai dengan data evaluasi. Ada beberapa cara yang bisa kita lakukan:
  - Cara pertama adalah menggabungkan semua data latihan dan data evaluasi menjadi satu kumpulan besar, lalu mengacaknya secara acak dan membaginya menjadi data latihan, data dev, dan data test. Keuntungan cara ini adalah semua jenis data memiliki distribusi yang sama, sehingga lebih mudah dikelola. Kerugian cara ini adalah sebagian besar data evaluasi akan berasal dari distribusi yang tidak kita inginkan. Misalnya, jika kita ingin membuat algoritma pembelajaran mesin untuk mengenali gambar kucing di internet, maka sebagian besar data evaluasi akan berasal dari gambar kucing profesional yang diunduh dari web, bukan dari gambar kucing amatir yang diunggah oleh pengguna aplikasi. Ini akan membuat algoritma pembelajaran mesin tidak fokus pada tujuan utama kita.
  - Cara kedua adalah menggunakan semua atau sebagian data latihan yang berasal dari distribusi yang berbeda dengan data evaluasi sebagai data latihan, tetapi menggunakan hanya data evaluasi yang berasal dari distribusi yang sama dengan tujuan kita sebagai data dev dan data test. Keuntungan cara ini adalah kita bisa menggunakan lebih banyak data latihan dan menargetkan algoritma pembelajaran mesin pada kondisi nyata yang kita inginkan. Kerugian cara ini adalah kita perlu menggunakan teknik-teknik khusus untuk menyesuaikan algoritma pembelajaran mesin dengan perbedaan antara distribusi data latihan dan distribusi data evaluasi.

- Teks di atas juga memberikan dua contoh aplikasi pembelajaran mesin yang mungkin mengalami masalah ketidaksesuaian data: mengenali gambar kucing di internet dan mengenali ucapan "buka jendela" di cermin spion mobil. Teks tersebut menjelaskan bagaimana memilih cara kedua untuk membagi data latihan dan data evaluasi pada kedua aplikasi tersebut.


====================================================================================================


## Bias and Variance with Mismatched Data Distributions
Teks di atas adalah bagian dari sebuah kursus online tentang pembelajaran mesin (machine learning). Teks tersebut membahas tentang bagaimana menganalisis dan mengatasi masalah ketika data latihan (training data) yang digunakan untuk melatih algoritma pembelajaran mesin berbeda dengan data evaluasi (dev and test data) yang digunakan untuk menguji kinerja algoritma tersebut. Berikut adalah penjelasan teks tersebut dengan bahasa yang mudah dipahami dan terperinci:

- Pembelajaran mesin adalah proses membuat komputer belajar dari data untuk melakukan tugas tertentu, seperti mengenali gambar kucing atau mengubah suara menjadi teks.
- Data latihan adalah kumpulan contoh yang diberikan kepada komputer untuk belajar pola atau aturan yang berguna untuk tugas tersebut. Misalnya, untuk mengenali gambar kucing, kita bisa memberikan banyak gambar kucing dan gambar bukan kucing sebagai data latihan.
- Data evaluasi adalah kumpulan contoh yang digunakan untuk mengukur seberapa baik komputer telah belajar dari data latihan. Data evaluasi biasanya dibagi menjadi dua bagian: data dev (development) dan data test (testing). Data dev digunakan untuk mengevaluasi dan memperbaiki algoritma pembelajaran mesin secara berkala, sedangkan data test digunakan untuk menguji kinerja akhir algoritma tersebut.
- Idealnya, data latihan dan data evaluasi harus memiliki distribusi yang sama, yaitu berasal dari sumber yang sama dan memiliki karakteristik yang sama. Misalnya, jika kita ingin membuat algoritma pembelajaran mesin untuk mengenali gambar kucing di internet, maka data latihan dan data evaluasi harus berisi gambar-gambar dari internet dengan berbagai ukuran, warna, sudut pandang, latar belakang, dll.
- Namun, terkadang kita tidak memiliki cukup data evaluasi yang berasal dari sumber yang sama dengan data latihan. Misalnya, jika kita ingin membuat algoritma pembelajaran mesin untuk mengenali ucapan "buka jendela" di cermin spion mobil, maka kita mungkin tidak memiliki banyak rekaman suara dari dalam mobil. Kita mungkin memiliki banyak rekaman suara dari sumber lain, seperti radio, podcast, atau telepon, yang bisa kita gunakan sebagai data latihan. Namun, rekaman suara dari sumber lain ini mungkin berbeda dengan rekaman suara dari dalam mobil dalam hal kualitas, volume, aksen, latar belakang, dll. Ini berarti data latihan dan data evaluasi memiliki distribusi yang berbeda.
- Ketika data latihan dan data evaluasi memiliki distribusi yang berbeda, kita mungkin menghadapi masalah ketidaksesuaian data (data mismatch), yaitu ketika algoritma pembelajaran mesin tidak bisa menyesuaikan diri dengan perbedaan antara data latihan dan data evaluasi. Misalnya, algoritma pembelajaran mesin mungkin bisa mengenali ucapan "buka jendela" dengan baik di rekaman suara dari radio, tetapi gagal mengenali ucapan yang sama di rekaman suara dari dalam mobil karena ada gangguan suara lalu lintas atau angin.
- Untuk menganalisis dan mengatasi masalah ketidaksesuaian data, kita perlu membandingkan tingkat kesalahan (error) algoritma pembelajaran mesin pada berbagai jenis data. Ada beberapa jenis kesalahan yang bisa kita ukur:
  - Kesalahan manusia (human error): ini adalah tingkat kesalahan terendah yang bisa dicapai oleh manusia dalam melakukan tugas tersebut. Misalnya, manusia mungkin bisa mengenali gambar kucing dengan akurasi hampir 100%. Kesalahan manusia ini juga disebut sebagai kesalahan Bayes (Bayes error) atau kesalahan optimal (optimal error), karena merepresentasikan batas bawah dari kesalahan yang mungkin terjadi.
  - Kesalahan latihan (training error): ini adalah tingkat kesalahan algoritma pembelajaran mesin pada data latihan. Kesalahan latihan ini menunjukkan seberapa baik algoritma pembelajaran mesin bisa mempelajari pola atau aturan dari data latihan. Jika kesalahan latihan tinggi, berarti algoritma pembelajaran mesin tidak bisa mempelajari pola atau aturan dengan baik. Ini disebut sebagai masalah bias tinggi (high bias) atau underfitting.
  - Kesalahan latihan-dev (training-dev error): ini adalah tingkat kesalahan algoritma pembelajaran mesin pada sebagian data latihan yang tidak digunakan untuk melatih algoritma tersebut. Data latihan-dev ini harus memiliki distribusi yang sama dengan data latihan lainnya. Kesalahan latihan-dev ini menunjukkan seberapa baik algoritma pembelajaran mesin bisa memgeneralisasi pola atau aturan yang dipelajari dari data latihan ke data baru yang belum pernah dilihat sebelumnya. Jika kesalahan latihan-dev tinggi, berarti algoritma pembelajaran mesin tidak bisa memgeneralisasi pola atau aturan dengan baik. Ini disebut sebagai masalah varians tinggi (high variance) atau overfitting.
  - Kesalahan dev (dev error): ini adalah tingkat kesalahan algoritma pembelajaran mesin pada data dev. Data dev ini harus memiliki distribusi yang sama dengan data test. Kesalahan dev ini menunjukkan seberapa baik algoritma pembelajaran mesin bisa menyelesaikan tugas pada kondisi nyata yang diinginkan. Jika kesalahan dev tinggi, berarti algoritma pembelajaran mesin tidak bisa menyelesaikan tugas dengan baik. Ini disebut sebagai masalah ketidaksesuaian data (data mismatch).
  - Kesalahan test (test error): ini adalah tingkat kesalahan algoritma pembelajaran mesin pada data test. Data test ini harus memiliki distribusi yang sama dengan data dev. Kesalahan test ini menunjukkan kinerja akhir algoritma pembelajaran mesin pada tugas tersebut. Jika kesalahan test tinggi, berarti algoritma pembelajaran mesin tidak bisa dipercaya untuk digunakan pada tugas tersebut.

- Untuk menganalisis dan mengatasi masalah ketidaksesuaian data, kita perlu membandingkan perbedaan antara kesalahan-kesalahan tersebut. Ada beberapa perbedaan yang bisa kita lihat:
  - Perbedaan antara kesalahan manusia dan kesalahan latihan: ini menunjukkan seberapa besar bias yang dapat dihindari (avoidable bias), yaitu seberapa jauh kinerja algoritma pembelajaran mesin masih bisa ditingkatkan agar mendekati kinerja manusia pada data latihan. Jika perbedaan ini besar, berarti kita perlu menggunakan teknik-teknik untuk mengurangi bias tinggi atau underfitting, seperti menggunakan model yang lebih kompleks, menambah fitur-fitur baru, atau mengurangi regularisasi.
  - Perbedaan antara kesalahan latihan dan kesalahan latihan-dev: ini menunjukkan seberapa besar varians, yaitu seberapa jauh kinerja algoritma pembelajaran mesin menurun ketika diterapkan pada data baru yang belum pernah dilihat sebelumnya. Jika perbedaan ini besar, berarti kita perlu menggunakan teknik-teknik untuk mengurangi varians tinggi atau overfitting, seperti menggunakan lebih banyak data latihan, menggunakan teknik augmentasi data (data augmentation), atau menggunakan lebih banyak regularisasi.
  - Perbedaan antara kesalahan latihan-dev dan kesalahan dev: ini menunjukkan seberapa besar ketidaksesuaian data, yaitu seberapa jauh kinerja algoritma pembelajaran mesin menurun ketika diterapkan pada kondisi nyata yang diinginkan. Jika perbedaan ini besar, berarti kita perlu menggunakan teknik-teknik untuk mengurangi ketidaksesuaian data, seperti menggunakan lebih banyak data dev dan test yang berasal dari sumber yang sama dengan kondisi nyata yang diinginkan, menggunakan teknik transfer learning (transfer learning), atau menggunakan teknik domain adaptation (domain adaptation).
- Selain itu, kita juga bisa melihat perbedaan antara kesalahan manusia dan kesalahan dev atau test: ini menunjukkan seberapa besar gap antara kinerja manusia dan kinerja algoritma pembelajaran mesin pada kondisi nyata yang diinginkan. Jika perbedaan ini kecil, berarti kita sudah mencapai **batas bawah dari kesalahan yang mungkin terjadi** (Bayes error atau optimal error) dan **tidak bisa meningkatkan kinerja algoritma pembelajaran mesin lebih jauh lagi**¹². Jika perbedaan ini besar, berarti kita masih bisa **mengurangi kesalahan dengan menggunakan teknik-teknik yang sesuai** untuk mengatasi masalah bias, varians, atau ketidaksesuaian data³⁴.


====================================================================================================


## Addressing Data Mismatch
Teks di atas adalah bagian dari sebuah kursus online tentang pembelajaran mesin (machine learning). Teks tersebut membahas tentang bagaimana mengatasi masalah ketidaksesuaian data (data mismatch) dengan menggunakan teknik sintesis data buatan (artificial data synthesis). Berikut adalah penjelasan teks tersebut dengan bahasa yang mudah dipahami dan terperinci:

- Masalah ketidaksesuaian data adalah ketika data latihan (training data) yang digunakan untuk melatih algoritma pembelajaran mesin berbeda dengan data evaluasi (dev and test data) yang digunakan untuk mengukur kinerja algoritma tersebut. Misalnya, jika kita ingin membuat algoritma pembelajaran mesin untuk mengenali suara "buka jendela" di cermin spion mobil, maka data latihan mungkin berisi rekaman suara dari berbagai sumber, seperti radio, podcast, atau telepon, sedangkan data evaluasi berisi rekaman suara dari dalam mobil. Rekaman suara dari berbagai sumber mungkin lebih jelas dan bervariasi daripada rekaman suara dari dalam mobil yang mungkin lebih bising dan terbatas.
- Masalah ketidaksesuaian data bisa menyebabkan algoritma pembelajaran mesin tidak bekerja dengan baik pada kondisi nyata yang kita inginkan. Misalnya, jika algoritma pembelajaran mesin hanya belajar dari rekaman suara yang jelas dan bervariasi, maka mungkin ia tidak bisa mengenali suara "buka jendela" yang bising dan terbatas dari dalam mobil.
- Untuk mengatasi masalah ketidaksesuaian data, kita perlu mencari cara untuk membuat data latihan lebih mirip dengan data evaluasi. Salah satu cara yang bisa kita lakukan adalah dengan menggunakan teknik sintesis data buatan (artificial data synthesis).
- Teknik sintesis data buatan adalah teknik untuk membuat data baru yang mirip dengan data evaluasi dengan menggunakan data latihan yang ada atau sumber lain. Misalnya, jika kita ingin membuat algoritma pembelajaran mesin untuk mengenali suara "buka jendela" di cermin spion mobil, maka kita bisa membuat rekaman suara baru yang mirip dengan rekaman suara dari dalam mobil dengan cara menambahkan suara bising mobil ke rekaman suara yang jelas dan bervariasi. Dengan cara ini, kita bisa mendapatkan lebih banyak data latihan yang sesuai dengan data evaluasi.
- Teknik sintesis data buatan bisa bekerja dengan baik untuk meningkatkan kinerja algoritma pembelajaran mesin. Namun, ada beberapa hal yang perlu diperhatikan saat menggunakan teknik ini:
  - Kita perlu memastikan bahwa data buatan yang kita buat mencakup variasi yang cukup dari semua kemungkinan data evaluasi. Misalnya, jika kita ingin membuat algoritma pembelajaran mesin untuk mengenali gambar mobil di jalan raya, maka kita tidak bisa hanya menggunakan gambar mobil dari video game yang mungkin hanya memiliki beberapa model mobil saja. Kita perlu menggunakan gambar mobil dari sumber lain yang memiliki banyak model mobil yang berbeda-beda.
  - Kita perlu memastikan bahwa data buatan yang kita buat tidak terlalu berbeda atau tidak realistis dari data evaluasi. Misalnya, jika kita ingin membuat algoritma pembelajaran mesin untuk mengenali gambar kucing di internet, maka kita tidak bisa hanya menggunakan gambar kucing kartun atau gambar kucing berwarna-warni. Kita perlu menggunakan gambar kucing yang sesuai dengan kenyataan.

- Teks di atas juga memberikan dua contoh penggunaan teknik sintesis data buatan: mengenali suara "buka jendela" di cermin spion mobil dan mengenali gambar mobil di jalan raya. Teks tersebut menjelaskan bagaimana membuat rekaman suara baru dengan menambahkan suara bising mobil ke rekaman suara yang jelas dan bervariasi, dan bagaimana memilih gambar mobil dari sumber lain yang memiliki banyak model mobil yang berbeda-beda.


====================================================================================================


## Transfer Learning
Teks di atas menjelaskan tentang transfer learning untuk deep learning. Transfer learning adalah teknik belajar mesin yang menggunakan pengetahuan yang dipelajari dari satu tugas untuk meningkatkan kinerja tugas lain yang berhubungan¹. Transfer learning biasanya dilakukan untuk tugas-tugas yang memiliki data yang terlalu sedikit untuk melatih model deep learning dari awal². Berikut adalah langkah-langkah umum untuk melakukan transfer learning:

- Ambil lapisan-lapisan dari model yang sudah dilatih sebelumnya untuk tugas A.
- Bekukan lapisan-lapisan tersebut, agar tidak merusak informasi yang ada di dalamnya saat melatih model lagi.
- Tambahkan beberapa lapisan baru yang dapat dilatih di atas lapisan-lapisan beku. Lapisan-lapisan baru ini akan belajar untuk mengubah fitur-fitur lama menjadi prediksi pada data baru untuk tugas B.
- Latih lapisan-lapisan baru pada data baru.
- Langkah terakhir yang opsional adalah fine-tuning, yaitu melepas pembekuan seluruh model atau sebagian model, dan melatih ulang dengan data baru dengan laju pembelajaran yang sangat rendah. Ini dapat meningkatkan kinerja model dengan menyesuaikan fitur-fitur yang sudah dipelajari sebelumnya dengan data baru².

Transfer learning dapat membantu model deep learning belajar lebih cepat atau lebih baik dengan menggunakan fitur-fitur umum yang dipelajari dari tugas A untuk tugas B. Misalnya, fitur-fitur dari model yang belajar mengenali kucing dapat berguna untuk memulai model yang bertujuan mengenali tanuki². Transfer learning cocok digunakan ketika tugas A dan B memiliki input X yang sama, misalnya gambar atau audio. Selain itu, transfer learning juga cocok digunakan ketika kita memiliki banyak data untuk tugas A dan sedikit data untuk tugas B³. Hal ini karena data untuk tugas B lebih berharga daripada data untuk tugas A, sehingga kita membutuhkan banyak data untuk tugas A agar fitur-fiturnya dapat bermanfaat untuk tugas B⁴. Terakhir, transfer learning juga cocok digunakan ketika kita menduga bahwa fitur-fitur rendah dari tugas A dapat membantu belajar tugas B³. Misalnya, belajar mengenali gambar dapat mengajarkan kita tentang struktur dan sifat gambar, yang dapat membantu kita dalam diagnosis radiologi. Atau belajar mengenali suara manusia dapat mengajarkan kita tentang komponen-komponen ucapan manusia, yang dapat membantu kita dalam deteksi kata aktivasi⁵.

====================================================================================================

## Multi-task Learning
Teks di atas menjelaskan tentang multi-task learning untuk deep learning. Multi-task learning adalah teknik belajar mesin yang melatih satu model untuk melakukan beberapa tugas secara bersamaan. Dalam deep learning, multi-task learning biasanya dilakukan dengan membagi beberapa lapisan dan parameter jaringan saraf antara tugas-tugas yang berbeda². Berikut adalah langkah-langkah umum untuk melakukan multi-task learning:

- Tentukan beberapa tugas yang ingin diselesaikan oleh model, misalnya mendeteksi pejalan kaki, mobil, rambu stop, dan lampu lalu lintas pada gambar.
- Buat label untuk setiap tugas pada setiap data, misalnya 0 atau 1 untuk menunjukkan ada atau tidaknya objek tertentu pada gambar. Jika label tidak tersedia untuk beberapa tugas pada beberapa data, maka abaikan tugas tersebut saat melatih model.
- Buat jaringan saraf yang memiliki input X dan output Y yang berdimensi sesuai dengan jumlah tugas. Misalnya, jika ada empat tugas, maka output Y adalah vektor empat dimensi yang berisi prediksi untuk setiap tugas.
- Tentukan fungsi kerugian untuk model dengan menjumlahkan kerugian logistik dari setiap prediksi untuk setiap tugas. Kerugian logistik adalah ukuran seberapa dekat prediksi dengan label sebenarnya.
- Latih model dengan mengoptimalkan fungsi kerugian menggunakan data dan label yang tersedia. Model akan belajar fitur-fitur umum dari semua tugas dan fitur-fitur spesifik dari setiap tugas.

Multi-task learning dapat meningkatkan kinerja model dibandingkan dengan melatih model terpisah untuk setiap tugas¹. Hal ini karena multi-task learning dapat:

- Meningkatkan jumlah data yang digunakan untuk melatih model dengan memanfaatkan data dari semua tugas³.
- Memfokuskan perhatian model pada fitur-fitur penting yang relevan untuk semua tugas³.
- Memperoleh informasi tambahan dari tugas-tugas lain yang dapat membantu model mempelajari tugas utama⁴.
- Membentuk representasi yang lebih kaya dan lebih kuat dari data dengan mempelajari berbagai aspek dari data.
- Mengurangi overfitting dengan meregularisasi model agar tidak terlalu spesifik pada satu tugas³.

Multi-task learning cocok digunakan ketika:

- Ada beberapa tugas yang berhubungan dan dapat membagi fitur-fitur rendah dari data, misalnya mendeteksi objek-objek pada gambar jalan raya².
- Jumlah data yang tersedia untuk setiap tugas kurang lebih sama atau cukup banyak, sehingga model dapat belajar dari semua tugas secara seimbang³.
- Ukuran model cukup besar untuk menampung semua tugas tanpa mengorbankan kinerja masing-masing tugas¹.

====================================================================================================

## What is End-to-end Deep Learning?
Teks di atas menjelaskan tentang end-to-end deep learning. End-to-end deep learning adalah teknik belajar mesin yang melatih satu model untuk melakukan tugas yang kompleks dengan menggunakan data mentah sebagai input tanpa ada tahapan pemrosesan manual¹. End-to-end deep learning dapat menyederhanakan sistem dan meningkatkan kinerja model dengan mempelajari fitur-fitur yang dibutuhkan secara otomatis dari data². Berikut adalah beberapa contoh aplikasi dan tantangan dari end-to-end deep learning:

- Pengenalan suara: End-to-end deep learning dapat mengubah klip audio menjadi teks transkrip secara langsung dengan menggunakan jaringan saraf besar³. Teknik ini menggantikan pendekatan tradisional yang membutuhkan banyak tahapan seperti ekstraksi fitur, klasifikasi fonem, pengenalan kata, dan lain-lain. End-to-end deep learning bekerja lebih baik ketika ada data yang sangat banyak untuk melatih model³.
- Penerjemahan mesin: End-to-end deep learning dapat menerjemahkan teks dari satu bahasa ke bahasa lain dengan menggunakan jaringan saraf rekuren atau jaringan saraf transformer⁴. Teknik ini menggantikan pendekatan tradisional yang membutuhkan analisis teks, pemecahan kalimat, dan lain-lain. End-to-end deep learning bekerja lebih baik karena dapat mempelajari konteks dan makna dari teks secara holistik⁴.
- Deteksi wajah: End-to-end deep learning tidak bekerja lebih baik daripada pendekatan multi-tahap untuk mendeteksi wajah dan mengidentifikasi orang pada gambar. Hal ini karena data yang tersedia untuk melatih model secara end-to-end tidak cukup banyak dibandingkan dengan data untuk melatih model secara multi-tahap. Selain itu, pendekatan multi-tahap dapat memecahkan masalah yang lebih sederhana seperti mendeteksi wajah dan mengukur panjang tulang.
- Estimasi usia anak dari X-ray: End-to-end deep learning tidak bekerja lebih baik daripada pendekatan multi-tahap untuk mengestimasi usia anak dari gambar X-ray tangan. Hal ini karena data yang tersedia untuk melatih model secara end-to-end tidak cukup banyak dibandingkan dengan data untuk melatih model secara multi-tahap. Selain itu, pendekatan multi-tahap dapat memecahkan masalah yang lebih sederhana seperti mengenali tulang dan mencocokkan dengan tabel statistik.

Dari contoh-contoh di atas, kita dapat menyimpulkan bahwa end-to-end deep learning cocok digunakan ketika:

- Ada data yang sangat banyak untuk melatih model secara langsung dari input ke output.
- Tidak ada pengetahuan domain spesifik yang dapat membantu dalam menentukan fitur-fitur yang relevan untuk tugas.
- Tugas yang ingin diselesaikan cukup kompleks dan holistik sehingga tidak mudah dibagi menjadi sub-tugas yang lebih sederhana.

====================================================================================================

## Whether to use End-to-end Deep Learning
Teks di atas menjelaskan tentang end-to-end deep learning untuk membangun sistem belajar mesin. End-to-end deep learning adalah teknik yang melatih satu model untuk melakukan tugas yang kompleks dengan menggunakan data mentah sebagai input tanpa ada tahapan pemrosesan manual. Teknik ini dapat menyederhanakan sistem dan meningkatkan kinerja model dengan mempelajari fitur-fitur yang dibutuhkan secara otomatis dari data. Berikut adalah beberapa poin penting dari teks di atas:

- End-to-end deep learning memiliki keuntungan dan kerugian yang perlu dipertimbangkan sebelum digunakan. Keuntungan utamanya adalah end-to-end deep learning dapat membiarkan data berbicara dan tidak terbatas oleh prasangka manusia. Kerugiannya adalah end-to-end deep learning mungkin membutuhkan data yang sangat banyak dan mengecualikan komponen-komponen yang dirancang manual yang mungkin berguna.
- End-to-end deep learning cocok digunakan ketika ada data yang cukup untuk mempelajari fungsi yang kompleks dari input ke output. Fungsi yang kompleks adalah fungsi yang sulit dipahami atau diprediksi oleh manusia, seperti mengubah suara menjadi teks atau mengenali usia anak dari tangannya.
- End-to-end deep learning tidak cocok digunakan ketika data yang tersedia tidak banyak atau fungsi yang diinginkan tidak terlalu kompleks. Dalam hal ini, mungkin lebih baik menggunakan komponen-komponen yang dirancang manual untuk membantu model belajar dari data atau untuk memberikan pengetahuan tambahan kepada model.
- End-to-end deep learning dapat diterapkan pada berbagai bidang, seperti pengenalan suara, pengenalan wajah, atau mengemudi otomatis. Namun, untuk setiap bidang, perlu dipilih dengan hati-hati apa yang menjadi input dan output model, serta bagaimana mengukur kinerja model.
- End-to-end deep learning adalah teknik yang masih berkembang dan membutuhkan banyak penelitian dan eksperimen. Oleh karena itu, penting untuk belajar dari contoh-contoh nyata dan mengerjakan latihan-latihan untuk memahami konsep-konsepnya dengan baik.

